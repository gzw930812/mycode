package com.cptech.basicInfo.controller;

import java.awt.geom.Area;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cptech.basicInfo.domain.AreaDO;
import com.cptech.basicInfo.service.AreaService;
import com.cptech.common.annotation.Log;
import com.cptech.common.config.Constant;
import com.cptech.common.controller.BaseController;
import com.cptech.common.domain.Tree;
import com.cptech.common.utils.R;
import com.cptech.system.domain.DeptDO;
import com.cptech.system.domain.UserDO;
import com.cptech.system.service.DeptService;

/**
 * 区域表
 * 
 * @author pjy
 * @email 1595418464@qq.com
 * @date 2018-06-19 09:24:05
 */
 
@Controller
@RequestMapping("/basicInfo/area")
public class AreaController extends BaseController{
	private String prefix = "basicInfo/area/";
	@Autowired
	private AreaService areaService;
	@Autowired
	private DeptService deptService;
	
	@GetMapping()
	@RequiresPermissions("basicInfo:area:area")
	String Area(){
	    return prefix + "area";
	}
	
	@Log("区域表-查询列表")
	@ResponseBody
	@GetMapping("/list")
	@RequiresPermissions("basicInfo:area:area")
	public List<AreaDO> list(AreaDO area){
		//查询列表数据
		List<AreaDO> areas = areaService.findAll(area);
		return areas;
	}
	
	@GetMapping(value={"/add","/add/{pid}"})
	@RequiresPermissions("basicInfo:area:add")
	String add(@PathVariable(value="pid",required=false) String pid, Model model){
		String pType = "0";
		if(pid != null) {
			model.addAttribute("pId", pid);
			if (Constant.AREA_ROOT_ID.equals(pid)) {
				model.addAttribute("pName", "中华人民共和国");
			} else {
				AreaDO areaDO = areaService.get(pid);
				model.addAttribute("pName", areaDO.getName());
				pType = areaDO.getType();
			}
		} else {
			model.addAttribute("pId", Constant.AREA_ROOT_ID);
			model.addAttribute("pName", "中华人民共和国");
		}
		model.addAttribute("pType", pType);
	    return prefix + "add";
	}

	@GetMapping("/edit/{id}")
	@RequiresPermissions("basicInfo:area:edit")
	String edit(@PathVariable("id") String id,Model model){
		AreaDO area = areaService.get(id);
		if(Constant.AREA_ROOT_ID.equals(area.getParentId())) {
			model.addAttribute("pName", "中华人民共和国");
			model.addAttribute("pId", Constant.AREA_ROOT_ID);
		}else {
			AreaDO parentArea = areaService.get(area.getParentId());
			model.addAttribute("pName", parentArea.getName());
			model.addAttribute("pId", parentArea.getId());
		}
		model.addAttribute("area", area);
	    return prefix + "edit";
	}
	
	/**
	 * 保存
	 */
	@Log("区域表-保存")
	@ResponseBody
	@PostMapping("/save")
	@RequiresPermissions("basicInfo:area:add")
	public R save( AreaDO area){
		String parentId = area.getParentId();
		AreaDO areaDO = areaService.get(parentId);
		if(areaService.getByCode(area.getCode()) != null) return R.error(1, "此区域代码已存在");
		String type = area.getType();
		if(!"1".equals(type) && !"2".equals(type) && !"3".equals(type)) return R.error(1, "暂不支持此地理区域");
		if(areaDO == null && !Constant.AREA_ROOT_ID.equals(parentId)) return R.error(1, "无此父节点");
		area.setParentIds(Constant.AREA_ROOT_ID.equals(parentId)?"0":areaDO.getParentIds()+','+parentId);
		if(areaService.save(area)>0){
			return R.ok();
		}
		return R.error();
	}
	/**
	 * 修改
	 */
	@Log("区域表-修改")
	@ResponseBody
	@RequestMapping("/update")
	@RequiresPermissions("basicInfo:area:edit")
	public R update( AreaDO area){
		String parentId = area.getParentId();
		AreaDO areaDO = areaService.get(parentId);
		if(areaService.getByCode(area.getCode()) != null) return R.error(1, "此区域代码已存在");
		String type = area.getType();
		if(!"1".equals(type) && !"2".equals(type) && !"3".equals(type)) return R.error(1, "暂不支持此地理区域");
		if(areaDO == null && !Constant.AREA_ROOT_ID.equals(parentId)) return R.error(1, "无此父节点");
		area.setParentIds(Constant.AREA_ROOT_ID.equals(parentId)?"0":areaDO.getParentIds()+','+parentId);
		areaService.update(area);
		return R.ok();
	}
	
	/**
	 * 删除
	 */
	@Log("区域表-删除")
	@PostMapping( "/remove")
	@ResponseBody
	@RequiresPermissions("basicInfo:area:remove")
	public R remove( String id){
		AreaDO area = areaService.get(id);
		if(area != null) {
			if (areaService.countChildren(id) > 0) {
				return R.error(1, "存在下属区域,不能删除");
			}
		}
		if(areaService.remove(id) > 0) {
			return R.ok();
		}
		//TODO 验证
		return R.error();
	}
	
	/**
	 * 删除
	 */
	@Log("区域表-批量删除")
	@PostMapping( "/batchRemove")
	@ResponseBody
	@RequiresPermissions("basicInfo:area:batchRemove")
	public R remove(@RequestParam("ids[]") String[] ids){
		areaService.batchRemove(ids);
		return R.ok();
	}
	
	@GetMapping("/tree")
	@ResponseBody
	public Tree<AreaDO> tree(AreaDO areaDo) {
		Tree<AreaDO> tree = new Tree<AreaDO>();
		AreaDO searchArea=new AreaDO();
		if(areaDo.getParentIds() == null) {
			UserDO user = getUser();
			DeptDO deptDO = deptService.get(user.getDeptId());
			searchArea.setParentIds(deptDO.getAreaId());
		} else {
			searchArea.setParentIds(areaDo.getParentIds());
		}
		tree = areaService.getTree(searchArea);
		return tree;
	}

	@GetMapping("/treeView")
	String treeView() {
		return  prefix + "areaTree";
	}
	
}
