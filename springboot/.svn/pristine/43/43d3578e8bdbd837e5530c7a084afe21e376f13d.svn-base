package com.cptech.appInfor.controller;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.cptech.common.annotation.Log;
import com.cptech.common.utils.PageUtils;
import com.cptech.common.utils.R;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageInfo;
import com.cptech.appInfor.domain.AppVersionDO;
import com.cptech.appInfor.service.AppVersionService;

/**
 * app版本管理表
 * 
 * @author fb
 * @email 1595418464@qq.com
 * @date 2018-06-19 09:41:15
 */
 
@Controller
@RequestMapping("/appInfor/appVersion")
public class AppVersionController {
	@Autowired
	private AppVersionService appVersionService;
	
	/**
	 *跳转app版本管理页面 
	 * @return
	 */
	@GetMapping()
	@RequiresPermissions("appInfor:appVersion:appVersion")
	String AppVersion(){
	    return "appInfor/appVersion/appVersion";
	}
	
	@Log("app版本管理表-查询列表")
	@ResponseBody
	@GetMapping("/list")
	@RequiresPermissions("appInfor:appVersion:appVersion")
	public PageUtils list(AppVersionDO appVersion){
		//查询列表数据
		Page<AppVersionDO> findByPage = appVersionService.findByPage(appVersion);
		PageInfo<AppVersionDO> pageInfo = new PageInfo<>(findByPage);
		PageUtils pageUtil = new PageUtils(pageInfo.getList(), (int)pageInfo.getTotal());
		return pageUtil;
	}
	
	/**
	 * app添加页面
	 * @return
	 */
	@GetMapping("/add")
	@RequiresPermissions("appInfor:appVersion:add")
	String add(){
	    return "appInfor/appVersion/add";
	}

	@GetMapping("/edit/{id}")
	@RequiresPermissions("appInfor:appVersion:edit")
	String edit(@PathVariable("id") String id,Model model){
		AppVersionDO appVersion = appVersionService.get(id);
		model.addAttribute("appVersion", appVersion);
	    return "appInfor/appVersion/edit";
	}
	
	/**
	 * 保存
	 */
	@Log("app版本管理表-保存")
	@ResponseBody
	@PostMapping("/save")
	@RequiresPermissions("appInfor:appVersion:add")
	public R save(MultipartFile file, AppVersionDO appVersion){
		List<AppVersionDO> listApp = appVersionService.findAll(new AppVersionDO());
		String filePath = "";
		if(!file.isEmpty()){
			
			File temp = new File("apkFile");
			
			//存放apk文件
			if(!temp.exists()){
				temp.mkdir();
			}
			
			filePath = temp.getPath()+"\\"+file.getOriginalFilename();
			
			for(AppVersionDO a : listApp){
				
				if(a.getUpdateUrl().equals(filePath)  ){
					
					return R.error("文件不能重复");
				}
				
				if(a.getVersion().equals(appVersion.getVersion())){
					return R.error("版本号不能相同");
				}
			}
			
			appVersion.setUpdateUrl(filePath);
			BufferedOutputStream out;
			
			try {
				//保存apk包
				out = new BufferedOutputStream(new FileOutputStream(new File(filePath)));
				
				out.write(file.getBytes());
				out.flush();
				out.close();
				
				if(appVersionService.save(appVersion)>0){
					return R.ok();
				}
				
			
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		
		return R.error();
	}
	/**
	 * 修改
	 */
	@Log("app版本管理表-修改")
	@ResponseBody
	@RequestMapping("/update")
	@RequiresPermissions("appInfor:appVersion:edit")
	public R update(MultipartFile file, AppVersionDO appVersion){
		
		List<AppVersionDO> listApp = appVersionService.findAll(new AppVersionDO());
		AppVersionDO app = appVersionService.get(appVersion.getId());
		//更新apk包
		if(null != file){
			String filePath = "";
			if(!file.isEmpty()){
				File temp = new File("apkFile");
				
				if(!temp.exists()){
					temp.mkdir();
				}
				//校验文件名
				for(AppVersionDO a : listApp){
					
					if(a.getId().equals(appVersion.getId())){
						continue;
					}
					if(a.getUpdateUrl().equals(filePath)  ){
						
						return R.error("文件不能重复");
					}
				}
				
				//删除老文件
				File oldFile = new File(app.getUpdateUrl());
				if(oldFile.exists()){
					oldFile.delete();
				}
				
				filePath = temp.getPath()+"\\"+file.getOriginalFilename();
				appVersion.setUpdateUrl(filePath);
				BufferedOutputStream out;
				
				try {
					//保存apk包
					out = new BufferedOutputStream(new FileOutputStream(new File(filePath)));
					
					out.write(file.getBytes());
					out.flush();
					out.close();
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		
		//校验版本号
		for(AppVersionDO a : listApp){
			
			if(a.getId().equals(appVersion.getId()) ){
				continue;
			}
			if(a.getVersion().equals(appVersion.getVersion())  ){
				
				return R.error("版本号不能相同");
			}
		}
		
		appVersionService.update(appVersion);
		return R.ok();
		
	}
	
	/**
	 * 删除
	 */
	@Log("app版本管理表-删除")
	@PostMapping( "/remove")
	@ResponseBody
	@RequiresPermissions("appInfor:appVersion:remove")
	public R remove( String id){
		if(appVersionService.remove(id)>0){
		return R.ok();
		}
		return R.error();
	}
	
	/**
	 * 删除
	 */
	@Log("app版本管理表-批量删除")
	@PostMapping( "/batchRemove")
	@ResponseBody
	@RequiresPermissions("appInfor:appVersion:batchRemove")
	public R remove(@RequestParam("ids[]") String[] ids){
		appVersionService.batchRemove(ids);
		return R.ok();
	}
	
}
